import os
import requests
from pyrogram import Client, filters
from flask import Flask # Flask ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
import asyncio
import logging

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá API ‡¶ï‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
# ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ï‡ßã‡¶°‡ßá ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶
API_ID = os.environ.get("API_ID")
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")
OMDB_API_KEY = os.environ.get("OMDB_API_KEY")
PORT = int(os.environ.get("PORT", 5000)) # Render ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßã‡¶∞‡ßç‡¶ü

# ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá
if not all([API_ID, API_HASH, BOT_TOKEN, OMDB_API_KEY]):
    logging.error("One or more environment variables (API_ID, API_HASH, BOT_TOKEN, OMDB_API_KEY) are not set.")
    exit(1) # ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®

# Pyrogram ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
try:
    app = Client(
        "movie_poster_bot",
        api_id=int(API_ID), # API_ID ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶Ü‡¶∏‡ßá, ‡¶§‡¶æ‡¶á int ‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        api_hash=API_HASH,
        bot_token=BOT_TOKEN,
        # ‡¶∏‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        workdir="."
    )
    logging.info("Pyrogram client initialized successfully.")
except Exception as e:
    logging.error(f"Error initializing Pyrogram client: {e}")
    exit(1)

# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
web_app = Flask(__name__)

# --- ‡¶á‡¶â‡¶ü‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---

async def get_movie_data(title: str) -> dict | None:
    """
    OMDb API ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡ßá‡•§
    """
    url = f"http://www.omdbapi.com/?t={title}&apikey={OMDB_API_KEY}"
    try:
        response = requests.get(url)
        response.raise_for_status() # HTTP ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
        res = response.json()
        
        if res.get("Response") == "False":
            logging.warning(f"Movie '{title}' not found on OMDb.")
            return None
        
        logging.info(f"Successfully fetched data for movie: {res.get('Title')}")
        return {
            "title": res.get("Title"),
            "year": res.get("Year"),
            "language": res.get("Language"),
            "poster": res.get("Poster")
        }
    except requests.exceptions.RequestException as e:
        logging.error(f"Error fetching movie data for '{title}': {e}")
        return None
    except ValueError as e: # JSON ‡¶°‡¶ø‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø
        logging.error(f"Error decoding JSON for '{title}': {e}")
        return None

def generate_html(data: dict, link1: str, link2: str | None = None) -> str:
    """
    ‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø HTML ‡¶ï‡ßã‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§
    """
    logging.info(f"Generating HTML for movie: {data['title']}")
    html = f"""
<div style="max-width:720px; margin:auto; background:#121212; border-radius:12px; padding:15px; font-family: Arial, sans-serif; color:#fff; box-shadow: 0 0 15px #ff0000;">
  <div style="text-align:center; margin-bottom:15px;">
    <img src="{data['poster']}" alt="{data['title']}" style="width:100%; max-width:600px; border-radius:10px; box-shadow: 0 0 15px #ff0000;">
  </div>
  <h1 style="font-size:32px; font-weight:bold; color:#ff0000; margin:0 0 10px;">{data['title']} ({data['year']}) [{data['language']}]</h1>
  <div style="display:flex; gap:15px; justify-content:center; flex-wrap: wrap;">
    <a href="{link1}" target="_blank" style="background:#ff0000; padding:12px 30px; border-radius:7px; color:#fff; font-weight:bold; text-decoration:none; box-shadow: 0 0 8px #ff0000;">Download 1</a>
"""
    if link2:
        html += f'<a href="{link2}" target="_blank" style="background:#ff0000; padding:12px 30px; border-radius:7px; color:#fff; font-weight:bold; text-decoration:none; box-shadow: 0 0 8px #ff0000;">Download 2</a>\n'
    html += "</div></div>"
    return html

# --- Pyrogram ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ---

@app.on_message(filters.private & filters.command("start"))
async def start_command(client, message):
    """
    /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡•§
    """
    logging.info(f"Received /start command from user: {message.from_user.id}")
    await message.reply(
        "üëã **‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞!** ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®:\n\n"
        "`‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ | ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï 1 | ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï 2 (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)`\n\n"
        "**‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:**\n"
        "`Pathaan 2023 | https://example.com/pathaan1 | https://example.com/pathaan2`",
        parse_mode="markdown"
    )

@app.on_message(filters.private & ~filters.command("start"))
async def movie_poster_handler(client, message):
    """
    ‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶¨‡¶Ç ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶•‡ßá‡¶ï‡ßá HTML ‡¶ï‡ßã‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡•§
    """
    logging.info(f"Received message from user {message.from_user.id}: {message.text}")
    parts = [p.strip() for p in message.text.split("|")] # ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶∏‡¶∞‡¶æ‡¶®

    if len(parts) < 2:
        logging.warning(f"Invalid format from user {message.from_user.id}: {message.text}")
        return await message.reply(
            "‚ùó **‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü!** ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶á ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®:\n"
            "`‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ | ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï 1 | ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï 2 (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)`",
            parse_mode="markdown"
        )

    title = parts[0]
    link1 = parts[1]
    link2 = parts[2] if len(parts) >= 3 else None

    # OMDb ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡ßÅ‡¶®
    movie_data = await get_movie_data(title)
    if not movie_data:
        logging.warning(f"Movie data not found for '{title}'.")
        return await message.reply("‚ùå **‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!** ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")

    # HTML ‡¶ï‡ßã‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
    html_code = generate_html(movie_data, link1, link2)
    
    # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá HTML ‡¶ï‡ßã‡¶° ‡¶™‡¶æ‡¶†‡¶æ‡¶®
    await message.reply(
        "‚úÖ **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶≤‡¶ó‡¶æ‡¶∞ HTML ‡¶ï‡ßã‡¶° ‡¶è‡¶ñ‡¶æ‡¶®‡ßá:**\n\n"
        "`‡¶è‡¶ü‡¶ø ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶≤‡¶ó‡¶æ‡¶∞‡ßá HTML ‡¶Æ‡ßã‡¶°‡ßá ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`",
        quote=True,
        parse_mode="markdown"
    )
    # <code> ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ï‡ßã‡¶° ‡¶¨‡ßç‡¶≤‡¶ï ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá
    await message.reply(f"```html\n{html_code}\n```", parse_mode="markdown")
    logging.info(f"HTML code sent to user {message.from_user.id} for movie: {title}")

# --- Flask ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ü ‡¶∞‡¶æ‡¶®‡¶ø‡¶Ç ‡¶≤‡¶ú‡¶ø‡¶ï ---

@web_app.route('/')
def home():
    """
    Render.com ‡¶è‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶∞‡ßÅ‡¶ü‡•§
    """
    logging.info("Flask home route accessed. Bot is running.")
    return "Movie Poster Bot is running!"

async def start_bot_async():
    """
    Pyrogram ‡¶¨‡¶ü‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá‡•§
    """
    logging.info("Starting Pyrogram bot (async)...")
    await app.start()
    logging.info("Pyrogram bot started.")
    # ‡¶¨‡¶ü‡¶ï‡ßá ‡¶Ö‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡¶≤‡¶§‡ßá ‡¶¶‡¶ø‡¶®, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
    # ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ app.run() ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ async context ‡¶è app.idle() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü
    await app.idle()
    logging.info("Pyrogram bot stopped.")
    await app.stop()


def start_bot_sync():
    """
    Pyrogram ‡¶¨‡¶ü‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÉ‡¶•‡¶ï ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶∏‡¶ø‡¶®‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
    """
    # ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßÅ‡¶™ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(start_bot_async())
    loop.close()


if __name__ == '__main__':
    logging.info("Application starting...")
    
    # Pyrogram ‡¶¨‡¶ü‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßÉ‡¶•‡¶ï ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
    import threading
    bot_thread = threading.Thread(target=start_bot_sync, daemon=True)
    bot_thread.start()
    logging.info("Pyrogram bot thread started.")

    # Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
    logging.info(f"Starting Flask web server on port {PORT}...")
    web_app.run(host='0.0.0.0', port=PORT)
    logging.info("Flask web server stopped.")

